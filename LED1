#include <Arduino.h>
#include <U8g2lib.h>
#include <OneButton.h>
#define FASTLED_INTERNAL
#include <FastLED.h>
 
#define OLED_CLOCK  15          
#define OLED_DATA   4
#define OLED_RESET  16
 
#define NUM_LEDS    60         
#define LED_PIN     5
#define BTN_PIN     4
 
CRGB g_LEDs[NUM_LEDS] = {0};    
 
U8G2_SSD1306_128X64_NONAME_F_HW_I2C g_OLED(U8G2_R2, OLED_RESET, OLED_CLOCK, OLED_DATA);
int g_lineHeight = 0;
 


double FramesPerSecond(double seconds)
{
  static double framesPerSecond; 
  framesPerSecond = (framesPerSecond * .9) + (1.0 / seconds * .1);
  return framesPerSecond;
}

 OneButton btn = OneButton(BTN_PIN, true, true);


void setup() 
 {
  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(LED_PIN, OUTPUT);
 
  Serial.begin(115200);
  while (!Serial) { }
  Serial.println("ESP32 Startup");
 
  g_OLED.begin();
  g_OLED.clear();
  g_OLED.setFont(u8g2_font_profont15_tf);
  g_lineHeight = g_OLED.getFontAscent() - g_OLED.getFontDescent();        
 
  FastLED.addLeds<WS2812B, LED_PIN, GRB>(g_LEDs, NUM_LEDS);               
  FastLED.setBrightness(16);

  switch (BTN_PIN) {
  case 0:;
    int main(); 
    struct (amethyst)();
      break;
    case 1:;
    int main();
    struct (rainbow)();
      break;

}
 
void loop(); 
{
  bool bLED = 0;
  double fps = 0;
 
  uint8_t initialHue = 0;
  const uint8_t deltaHue =16;
  const uint8_t hueDensity = 1;
 
  void amethyst();
  
  {
    
 
    double dStart = millis() / 1000.0;                                  
 
    // Handle OLED drawing
 
    g_OLED.clearBuffer();
    g_OLED.setCursor(0, g_lineHeight);
    g_OLED.printf("Amethyst");
    g_OLED.sendBuffer();
 
    // Handle LEDs
 
    fill_solid(g_LEDs, NUM_LEDS, CRGB::Amethyst);
 
    FastLED.show();
 
   
  }
  
  void rainbow();
  
  {
  
 
    double dStart = millis() / 1000.0;                                   
 
    // Handle OLED drawing
 
    g_OLED.clearBuffer();
    g_OLED.setCursor(0, g_lineHeight);
    g_OLED.printf(" RAINBOW");
    g_OLED.sendBuffer();
 
    // Handle LEDs
 
    fill_rainbow(g_LEDs, NUM_LEDS, initialHue += hueDensity, deltaHue);
 
    FastLED.show();
 
    double dEnd = millis() / 1000.0;
    fps = FramesPerSecond(dEnd - dStart);
  }
  }
}
